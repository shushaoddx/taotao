<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--扫描控制层和业务层的相关的类 -->
    <context:component-scan base-package="ss.controller"></context:component-scan>
    <context:component-scan base-package="ss.service.impl"></context:component-scan>

    <!--spring 和mybatis配置   开始 -->
    <!--加载配置文件-->
    <context:property-placeholder location="classpath:db.properties"></context:property-placeholder>
    <!-- 将连接数据库四大参数相关的类注入到ioc容器 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="maxActive" value="10"></property>
        <property name="minIdle" value="5"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--扫描mybatis相关xml -->
        <property name="configLocation" value="classpath:mybatis.xml"></property>
        <property name="mapperLocations" value="classpath:xml/*.xml"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--确定mybatis相关的接口的位置  -->
        <property name="basePackage" value="ss.mapper"></property>
        <!-- 确定sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <!--spring 和mybatis配置   结束 -->
    <!--扫描注解  开始 -->
    <!--扫描spring相关的注解  -->
    <context:annotation-config></context:annotation-config>
    <!--扫描mvc相关的注解  -->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!--扫描注解  结束 -->
    <!--释放静态资源开始....-->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>
    <mvc:resources mapping="/css/**" location="/WEB-INF/css/"></mvc:resources>
    <mvc:resources mapping="/js/**" location="/WEB-INF/js/"></mvc:resources>
    <!--释放静态资源结束...-->
    <!--配置spring MVC  开始-->

    <!--因为加载spring webmvc类时，会自动去加载这个包下DispatcherServlet.properties文件，
    里面配置一些需要处理器，控制器，所以说只需要配置视图解析器  -->

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/"
          p:suffix=".jsp"></bean>
    <!--配置spring MVC  结束-->

    <!-- 关于Mybatis-spring 的事务管理器-->
    <bean id="dstm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--将编程式事务管理需要的模板注入到ioc容器  -->
    <bean id="transactionTemplat" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="dstm"/>
    </bean>
    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="dstm"/>

    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="dstm">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- 切面 -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice"
                     pointcut="execution(* ss.service.*.*(..))"/>
    </aop:config>

    <!-- 	end 事务管理 -->


    <!--声明式事务管理  -->
    <!-- 配置业务层代理 -->
    <!--  <bean id="accountServiceProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        配置目标对象
        <property name="target" ref="billServiceImpl"/>
        注入事务管理器
        <property name="transactionManager" ref="dstm"/>
        注入事务的属性
        <property name="transactionAttributes">
            <props>
            	key代表事务作用的那个方法名   后面的PROPAGATION_REQUIRED传播行为
                <prop key="tranfer2">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>  -->


</beans>
